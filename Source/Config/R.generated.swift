// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 65 images.
  struct image {
    /// Image `LOGO`.
    static let lOGO = ImageResource(bundle: _R.hostingBundle, name: "LOGO")
    /// Image `bar_icon_back`.
    static let bar_icon_back = ImageResource(bundle: _R.hostingBundle, name: "bar_icon_back")
    /// Image `bar_icon_√`.
    static let bar_icon_ = ImageResource(bundle: _R.hostingBundle, name: "bar_icon_√")
    /// Image `bg_water`.
    static let bg_water = ImageResource(bundle: _R.hostingBundle, name: "bg_water")
    /// Image `bounced_success`.
    static let bounced_success = ImageResource(bundle: _R.hostingBundle, name: "bounced_success")
    /// Image `button_day11`.
    static let button_day11 = ImageResource(bundle: _R.hostingBundle, name: "button_day11")
    /// Image `button_day1`.
    static let button_day1 = ImageResource(bundle: _R.hostingBundle, name: "button_day1")
    /// Image `button_day22`.
    static let button_day22 = ImageResource(bundle: _R.hostingBundle, name: "button_day22")
    /// Image `button_day2`.
    static let button_day2 = ImageResource(bundle: _R.hostingBundle, name: "button_day2")
    /// Image `button_day33`.
    static let button_day33 = ImageResource(bundle: _R.hostingBundle, name: "button_day33")
    /// Image `button_day3`.
    static let button_day3 = ImageResource(bundle: _R.hostingBundle, name: "button_day3")
    /// Image `button_day44`.
    static let button_day44 = ImageResource(bundle: _R.hostingBundle, name: "button_day44")
    /// Image `button_day4`.
    static let button_day4 = ImageResource(bundle: _R.hostingBundle, name: "button_day4")
    /// Image `button_day55`.
    static let button_day55 = ImageResource(bundle: _R.hostingBundle, name: "button_day55")
    /// Image `button_day5`.
    static let button_day5 = ImageResource(bundle: _R.hostingBundle, name: "button_day5")
    /// Image `button_day66`.
    static let button_day66 = ImageResource(bundle: _R.hostingBundle, name: "button_day66")
    /// Image `button_day6`.
    static let button_day6 = ImageResource(bundle: _R.hostingBundle, name: "button_day6")
    /// Image `button_day77`.
    static let button_day77 = ImageResource(bundle: _R.hostingBundle, name: "button_day77")
    /// Image `button_day7`.
    static let button_day7 = ImageResource(bundle: _R.hostingBundle, name: "button_day7")
    /// Image `button_man1`.
    static let button_man1 = ImageResource(bundle: _R.hostingBundle, name: "button_man1")
    /// Image `button_man2`.
    static let button_man2 = ImageResource(bundle: _R.hostingBundle, name: "button_man2")
    /// Image `button_woman1`.
    static let button_woman1 = ImageResource(bundle: _R.hostingBundle, name: "button_woman1")
    /// Image `button_woman2`.
    static let button_woman2 = ImageResource(bundle: _R.hostingBundle, name: "button_woman2")
    /// Image `icon_Battery_charging`.
    static let icon_Battery_charging = ImageResource(bundle: _R.hostingBundle, name: "icon_Battery_charging")
    /// Image `icon_Battery_hight`.
    static let icon_Battery_hight = ImageResource(bundle: _R.hostingBundle, name: "icon_Battery_hight")
    /// Image `icon_Battery_low`.
    static let icon_Battery_low = ImageResource(bundle: _R.hostingBundle, name: "icon_Battery_low")
    /// Image `icon_Clock_initial`.
    static let icon_Clock_initial = ImageResource(bundle: _R.hostingBundle, name: "icon_Clock_initial")
    /// Image `icon_Head`.
    static let icon_Head = ImageResource(bundle: _R.hostingBundle, name: "icon_Head")
    /// Image `icon_about`.
    static let icon_about = ImageResource(bundle: _R.hostingBundle, name: "icon_about")
    /// Image `icon_account`.
    static let icon_account = ImageResource(bundle: _R.hostingBundle, name: "icon_account")
    /// Image `icon_add`.
    static let icon_add = ImageResource(bundle: _R.hostingBundle, name: "icon_add")
    /// Image `icon_buy`.
    static let icon_buy = ImageResource(bundle: _R.hostingBundle, name: "icon_buy")
    /// Image `icon_calendar-L2`.
    static let icon_calendarL2 = ImageResource(bundle: _R.hostingBundle, name: "icon_calendar-L2")
    /// Image `icon_calendar-L`.
    static let icon_calendarL = ImageResource(bundle: _R.hostingBundle, name: "icon_calendar-L")
    /// Image `icon_calendar-R2`.
    static let icon_calendarR2 = ImageResource(bundle: _R.hostingBundle, name: "icon_calendar-R2")
    /// Image `icon_calendar-R`.
    static let icon_calendarR = ImageResource(bundle: _R.hostingBundle, name: "icon_calendar-R")
    /// Image `icon_calendar`.
    static let icon_calendar = ImageResource(bundle: _R.hostingBundle, name: "icon_calendar")
    /// Image `icon_clock-remind-1`.
    static let icon_clockRemind1 = ImageResource(bundle: _R.hostingBundle, name: "icon_clock-remind-1")
    /// Image `icon_clock-remind-2`.
    static let icon_clockRemind2 = ImageResource(bundle: _R.hostingBundle, name: "icon_clock-remind-2")
    /// Image `icon_exit`.
    static let icon_exit = ImageResource(bundle: _R.hostingBundle, name: "icon_exit")
    /// Image `icon_gender`.
    static let icon_gender = ImageResource(bundle: _R.hostingBundle, name: "icon_gender")
    /// Image `icon_height`.
    static let icon_height = ImageResource(bundle: _R.hostingBundle, name: "icon_height")
    /// Image `icon_next`.
    static let icon_next = ImageResource(bundle: _R.hostingBundle, name: "icon_next")
    /// Image `icon_nickname`.
    static let icon_nickname = ImageResource(bundle: _R.hostingBundle, name: "icon_nickname")
    /// Image `icon_pairing`.
    static let icon_pairing = ImageResource(bundle: _R.hostingBundle, name: "icon_pairing")
    /// Image `icon_phone`.
    static let icon_phone = ImageResource(bundle: _R.hostingBundle, name: "icon_phone")
    /// Image `icon_plan`.
    static let icon_plan = ImageResource(bundle: _R.hostingBundle, name: "icon_plan")
    /// Image `icon_share`.
    static let icon_share = ImageResource(bundle: _R.hostingBundle, name: "icon_share")
    /// Image `icon_warn`.
    static let icon_warn = ImageResource(bundle: _R.hostingBundle, name: "icon_warn")
    /// Image `icon_web`.
    static let icon_web = ImageResource(bundle: _R.hostingBundle, name: "icon_web")
    /// Image `ion_Password`.
    static let ion_Password = ImageResource(bundle: _R.hostingBundle, name: "ion_Password")
    /// Image `label_icon_Clock_initial`.
    static let label_icon_Clock_initial = ImageResource(bundle: _R.hostingBundle, name: "label_icon_Clock_initial")
    /// Image `label_icon_Personal_initial`.
    static let label_icon_Personal_initial = ImageResource(bundle: _R.hostingBundle, name: "label_icon_Personal_initial")
    /// Image `label_icon_Personal`.
    static let label_icon_Personal = ImageResource(bundle: _R.hostingBundle, name: "label_icon_Personal")
    /// Image `label_icon_Record_initial`.
    static let label_icon_Record_initial = ImageResource(bundle: _R.hostingBundle, name: "label_icon_Record_initial")
    /// Image `label_icon_Record`.
    static let label_icon_Record = ImageResource(bundle: _R.hostingBundle, name: "label_icon_Record")
    /// Image `logo-1`.
    static let logo1 = ImageResource(bundle: _R.hostingBundle, name: "logo-1")
    /// Image `logo-2`.
    static let logo2 = ImageResource(bundle: _R.hostingBundle, name: "logo-2")
    /// Image `record_icon_day_initial`.
    static let record_icon_day_initial = ImageResource(bundle: _R.hostingBundle, name: "record_icon_day_initial")
    /// Image `record_icon_day`.
    static let record_icon_day = ImageResource(bundle: _R.hostingBundle, name: "record_icon_day")
    /// Image `record_icon_month_initial`.
    static let record_icon_month_initial = ImageResource(bundle: _R.hostingBundle, name: "record_icon_month_initial")
    /// Image `record_icon_month`.
    static let record_icon_month = ImageResource(bundle: _R.hostingBundle, name: "record_icon_month")
    /// Image `record_icon_time`.
    static let record_icon_time = ImageResource(bundle: _R.hostingBundle, name: "record_icon_time")
    /// Image `record_icon_week_initial`.
    static let record_icon_week_initial = ImageResource(bundle: _R.hostingBundle, name: "record_icon_week_initial")
    /// Image `record_icon_week`.
    static let record_icon_week = ImageResource(bundle: _R.hostingBundle, name: "record_icon_week")
    
    /// `UIImage(named: "LOGO", bundle: ..., traitCollection: ...)`
    static func lOGO(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.lOGO, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_back", bundle: ..., traitCollection: ...)`
    static func bar_icon_back(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bar_icon_back, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_√", bundle: ..., traitCollection: ...)`
    static func bar_icon_(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bar_icon_, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_water", bundle: ..., traitCollection: ...)`
    static func bg_water(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_water, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bounced_success", bundle: ..., traitCollection: ...)`
    static func bounced_success(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bounced_success, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day1", bundle: ..., traitCollection: ...)`
    static func button_day1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day11", bundle: ..., traitCollection: ...)`
    static func button_day11(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day11, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day2", bundle: ..., traitCollection: ...)`
    static func button_day2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day22", bundle: ..., traitCollection: ...)`
    static func button_day22(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day22, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day3", bundle: ..., traitCollection: ...)`
    static func button_day3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day33", bundle: ..., traitCollection: ...)`
    static func button_day33(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day33, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day4", bundle: ..., traitCollection: ...)`
    static func button_day4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day44", bundle: ..., traitCollection: ...)`
    static func button_day44(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day44, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day5", bundle: ..., traitCollection: ...)`
    static func button_day5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day55", bundle: ..., traitCollection: ...)`
    static func button_day55(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day55, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day6", bundle: ..., traitCollection: ...)`
    static func button_day6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day66", bundle: ..., traitCollection: ...)`
    static func button_day66(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day66, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day7", bundle: ..., traitCollection: ...)`
    static func button_day7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_day77", bundle: ..., traitCollection: ...)`
    static func button_day77(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_day77, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_man1", bundle: ..., traitCollection: ...)`
    static func button_man1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_man1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_man2", bundle: ..., traitCollection: ...)`
    static func button_man2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_man2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_woman1", bundle: ..., traitCollection: ...)`
    static func button_woman1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_woman1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_woman2", bundle: ..., traitCollection: ...)`
    static func button_woman2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_woman2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_charging", bundle: ..., traitCollection: ...)`
    static func icon_Battery_charging(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_Battery_charging, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_hight", bundle: ..., traitCollection: ...)`
    static func icon_Battery_hight(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_Battery_hight, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_low", bundle: ..., traitCollection: ...)`
    static func icon_Battery_low(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_Battery_low, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_Clock_initial", bundle: ..., traitCollection: ...)`
    static func icon_Clock_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_Clock_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_Head", bundle: ..., traitCollection: ...)`
    static func icon_Head(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_Head, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_about", bundle: ..., traitCollection: ...)`
    static func icon_about(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_about, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_account", bundle: ..., traitCollection: ...)`
    static func icon_account(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_account, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_add", bundle: ..., traitCollection: ...)`
    static func icon_add(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_add, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_buy", bundle: ..., traitCollection: ...)`
    static func icon_buy(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_buy, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar", bundle: ..., traitCollection: ...)`
    static func icon_calendar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_calendar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-L", bundle: ..., traitCollection: ...)`
    static func icon_calendarL(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_calendarL, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-L2", bundle: ..., traitCollection: ...)`
    static func icon_calendarL2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_calendarL2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-R", bundle: ..., traitCollection: ...)`
    static func icon_calendarR(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_calendarR, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-R2", bundle: ..., traitCollection: ...)`
    static func icon_calendarR2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_calendarR2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_clock-remind-1", bundle: ..., traitCollection: ...)`
    static func icon_clockRemind1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_clockRemind1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_clock-remind-2", bundle: ..., traitCollection: ...)`
    static func icon_clockRemind2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_clockRemind2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_exit", bundle: ..., traitCollection: ...)`
    static func icon_exit(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_exit, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_gender", bundle: ..., traitCollection: ...)`
    static func icon_gender(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_gender, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_height", bundle: ..., traitCollection: ...)`
    static func icon_height(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_height, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_next", bundle: ..., traitCollection: ...)`
    static func icon_next(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_next, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_nickname", bundle: ..., traitCollection: ...)`
    static func icon_nickname(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_nickname, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_pairing", bundle: ..., traitCollection: ...)`
    static func icon_pairing(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_pairing, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_phone", bundle: ..., traitCollection: ...)`
    static func icon_phone(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_phone, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_plan", bundle: ..., traitCollection: ...)`
    static func icon_plan(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_plan, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_share, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_warn", bundle: ..., traitCollection: ...)`
    static func icon_warn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_warn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon_web", bundle: ..., traitCollection: ...)`
    static func icon_web(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon_web, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ion_Password", bundle: ..., traitCollection: ...)`
    static func ion_Password(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ion_Password, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Clock_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Clock_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.label_icon_Clock_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Personal", bundle: ..., traitCollection: ...)`
    static func label_icon_Personal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.label_icon_Personal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Personal_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Personal_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.label_icon_Personal_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Record", bundle: ..., traitCollection: ...)`
    static func label_icon_Record(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.label_icon_Record, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Record_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Record_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.label_icon_Record_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "logo-1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logo1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "logo-2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logo2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_day", bundle: ..., traitCollection: ...)`
    static func record_icon_day(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_day, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_day_initial", bundle: ..., traitCollection: ...)`
    static func record_icon_day_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_day_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_month", bundle: ..., traitCollection: ...)`
    static func record_icon_month(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_month, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_month_initial", bundle: ..., traitCollection: ...)`
    static func record_icon_month_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_month_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_time", bundle: ..., traitCollection: ...)`
    static func record_icon_time(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_time, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_week", bundle: ..., traitCollection: ...)`
    static func record_icon_week(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_week, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_week_initial", bundle: ..., traitCollection: ...)`
    static func record_icon_week_initial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.record_icon_week_initial, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AboutUsViewController`.
    static let aboutUsViewController = _R.nib._AboutUsViewController()
    /// Nib `AccountTableViewCell`.
    static let accountTableViewCell = _R.nib._AccountTableViewCell()
    /// Nib `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView = _R.nib._ClockCollectionHeaderView()
    /// Nib `ClockCollectionViewCell`.
    static let clockCollectionViewCell = _R.nib._ClockCollectionViewCell()
    /// Nib `CupHeaderView`.
    static let cupHeaderView = _R.nib._CupHeaderView()
    /// Nib `FirmwareViewController`.
    static let firmwareViewController = _R.nib._FirmwareViewController()
    /// Nib `KSGuidanceViewController`.
    static let kSGuidanceViewController = _R.nib._KSGuidanceViewController()
    /// Nib `MineTableViewCell`.
    static let mineTableViewCell = _R.nib._MineTableViewCell()
    /// Nib `ShareSheet`.
    static let shareSheet = _R.nib._ShareSheet()
    /// Nib `TemperatureTableViewCell`.
    static let temperatureTableViewCell = _R.nib._TemperatureTableViewCell()
    /// Nib `TemperatureViewController`.
    static let temperatureViewController = _R.nib._TemperatureViewController()
    
    /// `UINib(name: "AboutUsViewController", bundle: ...)`
    static func aboutUsViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.aboutUsViewController)
    }
    
    /// `UINib(name: "AccountTableViewCell", bundle: ...)`
    static func accountTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.accountTableViewCell)
    }
    
    /// `UINib(name: "ClockCollectionHeaderView", bundle: ...)`
    static func clockCollectionHeaderView(_: Void) -> UINib {
      return UINib(resource: R.nib.clockCollectionHeaderView)
    }
    
    /// `UINib(name: "ClockCollectionViewCell", bundle: ...)`
    static func clockCollectionViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.clockCollectionViewCell)
    }
    
    /// `UINib(name: "CupHeaderView", bundle: ...)`
    static func cupHeaderView(_: Void) -> UINib {
      return UINib(resource: R.nib.cupHeaderView)
    }
    
    /// `UINib(name: "FirmwareViewController", bundle: ...)`
    static func firmwareViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.firmwareViewController)
    }
    
    /// `UINib(name: "KSGuidanceViewController", bundle: ...)`
    static func kSGuidanceViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.kSGuidanceViewController)
    }
    
    /// `UINib(name: "MineTableViewCell", bundle: ...)`
    static func mineTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.mineTableViewCell)
    }
    
    /// `UINib(name: "ShareSheet", bundle: ...)`
    static func shareSheet(_: Void) -> UINib {
      return UINib(resource: R.nib.shareSheet)
    }
    
    /// `UINib(name: "TemperatureTableViewCell", bundle: ...)`
    static func temperatureTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.temperatureTableViewCell)
    }
    
    /// `UINib(name: "TemperatureViewController", bundle: ...)`
    static func temperatureViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.temperatureViewController)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountTableViewCell`.
    static let accountTableViewCell: ReuseIdentifier<AccountTableViewCell> = ReuseIdentifier(identifier: "AccountTableViewCell")
    /// Reuse identifier `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView: ReuseIdentifier<ClockCollectionHeaderView> = ReuseIdentifier(identifier: "ClockCollectionHeaderView")
    /// Reuse identifier `ClockCollectionViewCell`.
    static let clockCollectionViewCell: ReuseIdentifier<ClockCollectionViewCell> = ReuseIdentifier(identifier: "ClockCollectionViewCell")
    /// Reuse identifier `MineTableViewCell`.
    static let mineTableViewCell: ReuseIdentifier<MineTableViewCell> = ReuseIdentifier(identifier: "MineTableViewCell")
    /// Reuse identifier `TemperatureTableViewCell`.
    static let temperatureTableViewCell: ReuseIdentifier<TemperatureTableViewCell> = ReuseIdentifier(identifier: "TemperatureTableViewCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SMS`.
    static let sMS = _R.storyboard.sMS()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "SMS", bundle: ...)`
    static func sMS(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.sMS)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.sMS_SDKLocalizable` struct is generated, and contains static references to 0 localization keys.
    struct sMS_SDKLocalizable {
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "im.meiyou.IMYTTQ") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AboutUsViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "AboutUsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutUsViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AboutUsViewController
      }
      
      private init() {}
    }
    
    struct _AccountTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = AccountTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "AccountTableViewCell"
      let name = "AccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }
      
      private init() {}
    }
    
    struct _ClockCollectionHeaderView: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = ClockCollectionHeaderView
      
      let bundle = _R.hostingBundle
      let identifier = "ClockCollectionHeaderView"
      let name = "ClockCollectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionHeaderView
      }
      
      private init() {}
    }
    
    struct _ClockCollectionViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = ClockCollectionViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "ClockCollectionViewCell"
      let name = "ClockCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionViewCell
      }
      
      private init() {}
    }
    
    struct _CupHeaderView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CupHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CupHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CupHeaderView
      }
      
      private init() {}
    }
    
    struct _FirmwareViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "FirmwareViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FirmwareViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? FirmwareViewController
      }
      
      private init() {}
    }
    
    struct _KSGuidanceViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "KSGuidanceViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> KSGuidanceViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? KSGuidanceViewController
      }
      
      private init() {}
    }
    
    struct _MineTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = MineTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "MineTableViewCell"
      let name = "MineTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MineTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MineTableViewCell
      }
      
      private init() {}
    }
    
    struct _ShareSheet: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "ShareSheet"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShareSheet? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ShareSheet
      }
      
      private init() {}
    }
    
    struct _TemperatureTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = TemperatureTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "TemperatureTableViewCell"
      let name = "TemperatureTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureTableViewCell
      }
      
      private init() {}
    }
    
    struct _TemperatureViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TemperatureViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureViewController
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try launchScreen.validate()
      try sMS.validate()
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "LOGO") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LOGO' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct login: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let login = StoryboardViewControllerResource<UserLoginViewController>(identifier: "login")
      let name = "Login"
      let register = StoryboardViewControllerResource<UserRegistViewController>(identifier: "register")
      
      func login(_: Void) -> UserLoginViewController? {
        return UIStoryboard(resource: self).instantiateViewController(login)
      }
      
      func register(_: Void) -> UserRegistViewController? {
        return UIStoryboard(resource: self).instantiateViewController(register)
      }
      
      static func validate() throws {
        if UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'UserLoginViewController'.") }
        if _R.storyboard.login().register() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'register' could not be loaded from storyboard 'Login' as 'UserRegistViewController'.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIImage(named: "label_icon_Personal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Personal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "label_icon_Record_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Record_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "label_icon_Clock_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Clock_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "label_icon_Clock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "label_icon_Personal_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Personal_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "label_icon_Record") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Record' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct sMS: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SMSViewController
      
      let bundle = _R.hostingBundle
      let name = "SMS"
      
      static func validate() throws {
        if UIImage(named: "LOGO") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LOGO' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIImage(named: "ion_Password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ion_Password' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIImage(named: "bg_water") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_water' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIImage(named: "icon_phone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_phone' is used in storyboard 'SMS', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}