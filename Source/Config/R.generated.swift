// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
  }
  
  struct file {
    
  }
  
  struct font {
    
  }
  
  struct image {
    static var brandAssets: UIImage? { return UIImage(named: "Brand Assets") }
    static var guidance1: UIImage? { return UIImage(named: "Guidance1") }
    static var guidance2: UIImage? { return UIImage(named: "Guidance2") }
    static var guidance3: UIImage? { return UIImage(named: "Guidance3") }
    static var guidance4: UIImage? { return UIImage(named: "Guidance4") }
    static var mine_photo: UIImage? { return UIImage(named: "mine_photo") }
    static var tata_close: UIImage? { return UIImage(named: "tata_close") }
  }
  
  struct nib {
    static var accountTableViewCell: _R.nib._AccountTableViewCell { return _R.nib._AccountTableViewCell() }
    static var clockCollectionViewCell: _R.nib._ClockCollectionViewCell { return _R.nib._ClockCollectionViewCell() }
    static var kSGuidanceViewController: _R.nib._KSGuidanceViewController { return _R.nib._KSGuidanceViewController() }
  }
  
  struct reuseIdentifier {
    static var accountTableViewCell: ReuseIdentifier<Cup.AccountTableViewCell> { return ReuseIdentifier(identifier: "AccountTableViewCell") }
    static var cell: ReuseIdentifier<UITableViewCell> { return ReuseIdentifier(identifier: "cell") }
    static var clockCollectionViewCell: ReuseIdentifier<Cup.ClockCollectionViewCell> { return ReuseIdentifier(identifier: "ClockCollectionViewCell") }
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: nil) }
      static var login: Cup.UserLoginViewController? { return instance.instantiateViewControllerWithIdentifier("login") as? Cup.UserLoginViewController }
      static var register: Cup.UserRegistViewController? { return instance.instantiateViewControllerWithIdentifier("register") as? Cup.UserRegistViewController }
      
      static func validateImages() {
        assert(UIImage(named: "logo") != nil, "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(login != nil, "[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'Cup.UserLoginViewController'.")
        assert(register != nil, "[R.swift] ViewController with identifier 'register' could not be loaded from storyboard 'Login' as 'Cup.UserRegistViewController'.")
      }
    }
    
    struct main {
      static var initialViewController: Cup.TabBarViewController? { return instance.instantiateInitialViewController() as? Cup.TabBarViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: nil) }
      
      static func validateImages() {
        assert(UIImage(named: "mine_photo") != nil, "[R.swift] Image named 'mine_photo' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct _R {
  struct nib {
    struct _AccountTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "AccountTableViewCell", bundle: nil) }
      var name: String { return "AccountTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<Cup.AccountTableViewCell> { return ReuseIdentifier(identifier: "AccountTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> Cup.AccountTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? Cup.AccountTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _ClockCollectionViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "ClockCollectionViewCell", bundle: nil) }
      var name: String { return "ClockCollectionViewCell" }
      var reuseIdentifier: ReuseIdentifier<Cup.ClockCollectionViewCell> { return ReuseIdentifier(identifier: "ClockCollectionViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> Cup.ClockCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? Cup.ClockCollectionViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _KSGuidanceViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "KSGuidanceViewController", bundle: nil) }
      var name: String { return "KSGuidanceViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> Cup.KSGuidanceViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? Cup.KSGuidanceViewController
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: nil)
  }
}