// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.login.validateImages()
    storyboard.login.validateViewControllers()
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
    storyboard.sMS.validateImages()
    storyboard.sMS.validateViewControllers()
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
  }
  
  struct file {
    static var cityPlist: NSURL? { return _R.hostingBundle?.URLForResource("City", withExtension: "plist") }
    static var imgBundle: NSURL? { return _R.hostingBundle?.URLForResource("img", withExtension: "bundle") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var clock: UIImage? { return UIImage(named: "clock", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var clock_close: UIImage? { return UIImage(named: "clock_close", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var clock_open: UIImage? { return UIImage(named: "clock_open", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var clock_up: UIImage? { return UIImage(named: "clock_up", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cup: UIImage? { return UIImage(named: "cup", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cup_adaptation: UIImage? { return UIImage(named: "cup_adaptation", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cup_level: UIImage? { return UIImage(named: "cup_level", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cup_up: UIImage? { return UIImage(named: "cup_up", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var guidance1: UIImage? { return UIImage(named: "Guidance1", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var guidance2: UIImage? { return UIImage(named: "Guidance2", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var guidance3: UIImage? { return UIImage(named: "Guidance3", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var guidance4: UIImage? { return UIImage(named: "Guidance4", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var logo: UIImage? { return UIImage(named: "logo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var me: UIImage? { return UIImage(named: "me", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var me_up: UIImage? { return UIImage(named: "me_up", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var mine_photo: UIImage? { return UIImage(named: "mine_photo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var photo: UIImage? { return UIImage(named: "photo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var plus: UIImage? { return UIImage(named: "plus", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tata_close: UIImage? { return UIImage(named: "tata_close", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var 已恒温: UIImage? { return UIImage(named: "已恒温", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var 恒温中: UIImage? { return UIImage(named: "恒温中", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var 自然温: UIImage? { return UIImage(named: "自然温", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    static var aboutUsViewController: _R.nib._AboutUsViewController { return _R.nib._AboutUsViewController() }
    static var accountTableViewCell: _R.nib._AccountTableViewCell { return _R.nib._AccountTableViewCell() }
    static var cFCityCell: _R.nib._CFCityCell { return _R.nib._CFCityCell() }
    static var citySearchResultVC: _R.nib._CitySearchResultVC { return _R.nib._CitySearchResultVC() }
    static var clockCollectionHeaderView: _R.nib._ClockCollectionHeaderView { return _R.nib._ClockCollectionHeaderView() }
    static var clockCollectionViewCell: _R.nib._ClockCollectionViewCell { return _R.nib._ClockCollectionViewCell() }
    static var cupHeaderView: _R.nib._CupHeaderView { return _R.nib._CupHeaderView() }
    static var firmwareViewController: _R.nib._FirmwareViewController { return _R.nib._FirmwareViewController() }
    static var headerItemView: _R.nib._HeaderItemView { return _R.nib._HeaderItemView() }
    static var kSGuidanceViewController: _R.nib._KSGuidanceViewController { return _R.nib._KSGuidanceViewController() }
    static var mineTableViewCell: _R.nib._MineTableViewCell { return _R.nib._MineTableViewCell() }
    static var temperatureTableViewCell: _R.nib._TemperatureTableViewCell { return _R.nib._TemperatureTableViewCell() }
    static var temperatureViewController: _R.nib._TemperatureViewController { return _R.nib._TemperatureViewController() }
  }
  
  struct reuseIdentifier {
    static var accountTableViewCell: ReuseIdentifier<AccountTableViewCell> { return ReuseIdentifier(identifier: "AccountTableViewCell") }
    static var clockCollectionHeaderView: ReuseIdentifier<ClockCollectionHeaderView> { return ReuseIdentifier(identifier: "ClockCollectionHeaderView") }
    static var clockCollectionViewCell: ReuseIdentifier<ClockCollectionViewCell> { return ReuseIdentifier(identifier: "ClockCollectionViewCell") }
    static var mineTableViewCell: ReuseIdentifier<MineTableViewCell> { return ReuseIdentifier(identifier: "MineTableViewCell") }
    static var temperatureTableViewCell: ReuseIdentifier<TemperatureTableViewCell> { return ReuseIdentifier(identifier: "TemperatureTableViewCell") }
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "logo") != nil, "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct login {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Login", bundle: _R.hostingBundle) }
      static var login: UserLoginViewController? { return instance.instantiateViewControllerWithIdentifier("login") as? UserLoginViewController }
      static var register: UserRegistViewController? { return instance.instantiateViewControllerWithIdentifier("register") as? UserRegistViewController }
      
      static func validateImages() {
        assert(UIImage(named: "logo") != nil, "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(login != nil, "[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'UserLoginViewController'.")
        assert(register != nil, "[R.swift] ViewController with identifier 'register' could not be loaded from storyboard 'Login' as 'UserRegistViewController'.")
      }
    }
    
    struct main {
      static var initialViewController: TabBarViewController? { return instance.instantiateInitialViewController() as? TabBarViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "clock") != nil, "[R.swift] Image named 'clock' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "cup") != nil, "[R.swift] Image named 'cup' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "me") != nil, "[R.swift] Image named 'me' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct sMS {
      static var initialViewController: SMSViewController? { return instance.instantiateInitialViewController() as? SMSViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "SMS", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        assert(UIImage(named: "logo") != nil, "[R.swift] Image named 'logo' is used in storyboard 'SMS', but couldn't be loaded.")
        assert(UIImage(named: "photo") != nil, "[R.swift] Image named 'photo' is used in storyboard 'SMS', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "im.meiyou.imyttq") }
  
  struct nib {
    struct _AboutUsViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "AboutUsViewController", bundle: _R.hostingBundle) }
      var name: String { return "AboutUsViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> AboutUsViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AboutUsViewController
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _AccountTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "AccountTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "AccountTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<AccountTableViewCell> { return ReuseIdentifier(identifier: "AccountTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> AccountTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _CFCityCell: NibResource {
      var instance: UINib { return UINib.init(nibName: "CFCityCell", bundle: _R.hostingBundle) }
      var name: String { return "CFCityCell" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> CFCityCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CFCityCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _CitySearchResultVC: NibResource {
      var instance: UINib { return UINib.init(nibName: "CitySearchResultVC", bundle: _R.hostingBundle) }
      var name: String { return "CitySearchResultVC" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _ClockCollectionHeaderView: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "ClockCollectionHeaderView", bundle: _R.hostingBundle) }
      var name: String { return "ClockCollectionHeaderView" }
      var reuseIdentifier: ReuseIdentifier<ClockCollectionHeaderView> { return ReuseIdentifier(identifier: "ClockCollectionHeaderView") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> ClockCollectionHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionHeaderView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _ClockCollectionViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "ClockCollectionViewCell", bundle: _R.hostingBundle) }
      var name: String { return "ClockCollectionViewCell" }
      var reuseIdentifier: ReuseIdentifier<ClockCollectionViewCell> { return ReuseIdentifier(identifier: "ClockCollectionViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> ClockCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _CupHeaderView: NibResource {
      var instance: UINib { return UINib.init(nibName: "CupHeaderView", bundle: _R.hostingBundle) }
      var name: String { return "CupHeaderView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> CupHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CupHeaderView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _FirmwareViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "FirmwareViewController", bundle: _R.hostingBundle) }
      var name: String { return "FirmwareViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> FirmwareViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? FirmwareViewController
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _HeaderItemView: NibResource {
      var instance: UINib { return UINib.init(nibName: "HeaderItemView", bundle: _R.hostingBundle) }
      var name: String { return "HeaderItemView" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> HeaderItemView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? HeaderItemView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _KSGuidanceViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "KSGuidanceViewController", bundle: _R.hostingBundle) }
      var name: String { return "KSGuidanceViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> KSGuidanceViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? KSGuidanceViewController
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _MineTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "MineTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "MineTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<MineTableViewCell> { return ReuseIdentifier(identifier: "MineTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> MineTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MineTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TemperatureTableViewCell: NibResource, Reusable {
      var instance: UINib { return UINib.init(nibName: "TemperatureTableViewCell", bundle: _R.hostingBundle) }
      var name: String { return "TemperatureTableViewCell" }
      var reuseIdentifier: ReuseIdentifier<TemperatureTableViewCell> { return ReuseIdentifier(identifier: "TemperatureTableViewCell") }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TemperatureTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureTableViewCell
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
    
    struct _TemperatureViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "TemperatureViewController", bundle: _R.hostingBundle) }
      var name: String { return "TemperatureViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> TemperatureViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureViewController
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}