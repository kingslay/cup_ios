//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "im.meiyou.IMYTTQ2") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 55 images.
  struct image {
    /// Image `LOGO`.
    static let lOGO = Rswift.ImageResource(bundle: R.hostingBundle, name: "LOGO")
    /// Image `bar_icon_back`.
    static let bar_icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_back")
    /// Image `bar_icon_√`.
    static let bar_icon_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar_icon_√")
    /// Image `bg_water`.
    static let bg_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_water")
    /// Image `bounced_success`.
    static let bounced_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "bounced_success")
    /// Image `button_man1`.
    static let button_man1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_man1")
    /// Image `button_man2`.
    static let button_man2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_man2")
    /// Image `button_woman1`.
    static let button_woman1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_woman1")
    /// Image `button_woman2`.
    static let button_woman2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_woman2")
    /// Image `icon_Battery_charging`.
    static let icon_Battery_charging = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Battery_charging")
    /// Image `icon_Battery_hight`.
    static let icon_Battery_hight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Battery_hight")
    /// Image `icon_Battery_low`.
    static let icon_Battery_low = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Battery_low")
    /// Image `icon_Head`.
    static let icon_Head = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Head")
    /// Image `icon_about`.
    static let icon_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about")
    /// Image `icon_account`.
    static let icon_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_account")
    /// Image `icon_add`.
    static let icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add")
    /// Image `icon_age`.
    static let icon_age = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_age")
    /// Image `icon_buy`.
    static let icon_buy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_buy")
    /// Image `icon_calendar-L2`.
    static let icon_calendarL2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar-L2")
    /// Image `icon_calendar-L`.
    static let icon_calendarL = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar-L")
    /// Image `icon_calendar-R2`.
    static let icon_calendarR2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar-R2")
    /// Image `icon_calendar-R`.
    static let icon_calendarR = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar-R")
    /// Image `icon_calendar`.
    static let icon_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar")
    /// Image `icon_clock-remind-1`.
    static let icon_clockRemind1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clock-remind-1")
    /// Image `icon_clock-remind-2`.
    static let icon_clockRemind2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clock-remind-2")
    /// Image `icon_exit`.
    static let icon_exit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_exit")
    /// Image `icon_gender`.
    static let icon_gender = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gender")
    /// Image `icon_height`.
    static let icon_height = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_height")
    /// Image `icon_modify`.
    static let icon_modify = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_modify")
    /// Image `icon_next`.
    static let icon_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_next")
    /// Image `icon_nickname`.
    static let icon_nickname = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nickname")
    /// Image `icon_pairing`.
    static let icon_pairing = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pairing")
    /// Image `icon_phone`.
    static let icon_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_phone")
    /// Image `icon_plan`.
    static let icon_plan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_plan")
    /// Image `icon_share`.
    static let icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share")
    /// Image `icon_warn`.
    static let icon_warn = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_warn")
    /// Image `icon_web`.
    static let icon_web = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_web")
    /// Image `icon_weight`.
    static let icon_weight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_weight")
    /// Image `ion_Password`.
    static let ion_Password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ion_Password")
    /// Image `label_icon_Clock_initial`.
    static let label_icon_Clock_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Clock_initial")
    /// Image `label_icon_Clock`.
    static let label_icon_Clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Clock")
    /// Image `label_icon_Personal_initial`.
    static let label_icon_Personal_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Personal_initial")
    /// Image `label_icon_Personal`.
    static let label_icon_Personal = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Personal")
    /// Image `label_icon_Record_initial`.
    static let label_icon_Record_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Record_initial")
    /// Image `label_icon_Record`.
    static let label_icon_Record = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_icon_Record")
    /// Image `logo-1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-1")
    /// Image `logo-2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-2")
    /// Image `record_icon_time`.
    static let record_icon_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "record_icon_time")
    /// Image `share_friend`.
    static let share_friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_friend")
    /// Image `share_qzone`.
    static let share_qzone = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_qzone")
    /// Image `share_sina`.
    static let share_sina = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_sina")
    /// Image `share_tencent`.
    static let share_tencent = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_tencent")
    /// Image `share_weixin`.
    static let share_weixin = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_weixin")
    /// Image `闪屏`.
    static let 闪屏 = Rswift.ImageResource(bundle: R.hostingBundle, name: "闪屏")
    /// Image `默认头像`.
    static let 默认头像 = Rswift.ImageResource(bundle: R.hostingBundle, name: "默认头像")
    
    /// `UIImage(named: "LOGO", bundle: ..., traitCollection: ...)`
    static func lOGO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lOGO, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_back", bundle: ..., traitCollection: ...)`
    static func bar_icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar_icon_√", bundle: ..., traitCollection: ...)`
    static func bar_icon_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar_icon_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_water", bundle: ..., traitCollection: ...)`
    static func bg_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_water, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bounced_success", bundle: ..., traitCollection: ...)`
    static func bounced_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bounced_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_man1", bundle: ..., traitCollection: ...)`
    static func button_man1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_man1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_man2", bundle: ..., traitCollection: ...)`
    static func button_man2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_man2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_woman1", bundle: ..., traitCollection: ...)`
    static func button_woman1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_woman1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "button_woman2", bundle: ..., traitCollection: ...)`
    static func button_woman2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_woman2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_charging", bundle: ..., traitCollection: ...)`
    static func icon_Battery_charging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Battery_charging, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_hight", bundle: ..., traitCollection: ...)`
    static func icon_Battery_hight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Battery_hight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_Battery_low", bundle: ..., traitCollection: ...)`
    static func icon_Battery_low(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Battery_low, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_Head", bundle: ..., traitCollection: ...)`
    static func icon_Head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Head, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_about", bundle: ..., traitCollection: ...)`
    static func icon_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_account", bundle: ..., traitCollection: ...)`
    static func icon_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_add", bundle: ..., traitCollection: ...)`
    static func icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_age", bundle: ..., traitCollection: ...)`
    static func icon_age(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_age, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_buy", bundle: ..., traitCollection: ...)`
    static func icon_buy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_buy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar", bundle: ..., traitCollection: ...)`
    static func icon_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-L", bundle: ..., traitCollection: ...)`
    static func icon_calendarL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendarL, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-L2", bundle: ..., traitCollection: ...)`
    static func icon_calendarL2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendarL2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-R", bundle: ..., traitCollection: ...)`
    static func icon_calendarR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendarR, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_calendar-R2", bundle: ..., traitCollection: ...)`
    static func icon_calendarR2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendarR2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_clock-remind-1", bundle: ..., traitCollection: ...)`
    static func icon_clockRemind1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clockRemind1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_clock-remind-2", bundle: ..., traitCollection: ...)`
    static func icon_clockRemind2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clockRemind2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_exit", bundle: ..., traitCollection: ...)`
    static func icon_exit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_exit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_gender", bundle: ..., traitCollection: ...)`
    static func icon_gender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gender, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_height", bundle: ..., traitCollection: ...)`
    static func icon_height(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_height, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_modify", bundle: ..., traitCollection: ...)`
    static func icon_modify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_modify, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_next", bundle: ..., traitCollection: ...)`
    static func icon_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nickname", bundle: ..., traitCollection: ...)`
    static func icon_nickname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nickname, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pairing", bundle: ..., traitCollection: ...)`
    static func icon_pairing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pairing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_phone", bundle: ..., traitCollection: ...)`
    static func icon_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_plan", bundle: ..., traitCollection: ...)`
    static func icon_plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_plan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_warn", bundle: ..., traitCollection: ...)`
    static func icon_warn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_warn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_web", bundle: ..., traitCollection: ...)`
    static func icon_web(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_web, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_weight", bundle: ..., traitCollection: ...)`
    static func icon_weight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_weight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ion_Password", bundle: ..., traitCollection: ...)`
    static func ion_Password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ion_Password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Clock", bundle: ..., traitCollection: ...)`
    static func label_icon_Clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Clock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Clock_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Clock_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Clock_initial, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Personal", bundle: ..., traitCollection: ...)`
    static func label_icon_Personal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Personal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Personal_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Personal_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Personal_initial, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Record", bundle: ..., traitCollection: ...)`
    static func label_icon_Record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Record, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_icon_Record_initial", bundle: ..., traitCollection: ...)`
    static func label_icon_Record_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_icon_Record_initial, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "record_icon_time", bundle: ..., traitCollection: ...)`
    static func record_icon_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.record_icon_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_friend", bundle: ..., traitCollection: ...)`
    static func share_friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_friend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_qzone", bundle: ..., traitCollection: ...)`
    static func share_qzone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_qzone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_sina", bundle: ..., traitCollection: ...)`
    static func share_sina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_sina, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_tencent", bundle: ..., traitCollection: ...)`
    static func share_tencent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_tencent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_weixin", bundle: ..., traitCollection: ...)`
    static func share_weixin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_weixin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "闪屏", bundle: ..., traitCollection: ...)`
    static func 闪屏(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.闪屏, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "默认头像", bundle: ..., traitCollection: ...)`
    static func 默认头像(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.默认头像, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 18 nibs.
  struct nib {
    /// Nib `AboutUsViewController`.
    static let aboutUsViewController = _R.nib._AboutUsViewController()
    /// Nib `AccountTableViewCell`.
    static let accountTableViewCell = _R.nib._AccountTableViewCell()
    /// Nib `AccoutBindViewController`.
    static let accoutBindViewController = _R.nib._AccoutBindViewController()
    /// Nib `AddClockViewController`.
    static let addClockViewController = _R.nib._AddClockViewController()
    /// Nib `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView = _R.nib._ClockCollectionHeaderView()
    /// Nib `ClockCollectionViewCell`.
    static let clockCollectionViewCell = _R.nib._ClockCollectionViewCell()
    /// Nib `ClockHeaderView`.
    static let clockHeaderView = _R.nib._ClockHeaderView()
    /// Nib `ClockTableViewCell`.
    static let clockTableViewCell = _R.nib._ClockTableViewCell()
    /// Nib `CupHeaderView`.
    static let cupHeaderView = _R.nib._CupHeaderView()
    /// Nib `FirmwareViewController`.
    static let firmwareViewController = _R.nib._FirmwareViewController()
    /// Nib `KSGuidanceViewController`.
    static let kSGuidanceViewController = _R.nib._KSGuidanceViewController()
    /// Nib `MineTableViewCell`.
    static let mineTableViewCell = _R.nib._MineTableViewCell()
    /// Nib `PushSettingViewController`.
    static let pushSettingViewController = _R.nib._PushSettingViewController()
    /// Nib `ShareSheet`.
    static let shareSheet = _R.nib._ShareSheet()
    /// Nib `TemperatureTableViewCell`.
    static let temperatureTableViewCell = _R.nib._TemperatureTableViewCell()
    /// Nib `TemperatureViewController`.
    static let temperatureViewController = _R.nib._TemperatureViewController()
    /// Nib `WaterHistoryTableViewCell`.
    static let waterHistoryTableViewCell = _R.nib._WaterHistoryTableViewCell()
    /// Nib `WaterplanViewController`.
    static let waterplanViewController = _R.nib._WaterplanViewController()
    
    /// `UINib(name: "AboutUsViewController", in: bundle)`
    static func aboutUsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutUsViewController)
    }
    
    /// `UINib(name: "AccountTableViewCell", in: bundle)`
    static func accountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountTableViewCell)
    }
    
    /// `UINib(name: "AccoutBindViewController", in: bundle)`
    static func accoutBindViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accoutBindViewController)
    }
    
    /// `UINib(name: "AddClockViewController", in: bundle)`
    static func addClockViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addClockViewController)
    }
    
    /// `UINib(name: "ClockCollectionHeaderView", in: bundle)`
    static func clockCollectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clockCollectionHeaderView)
    }
    
    /// `UINib(name: "ClockCollectionViewCell", in: bundle)`
    static func clockCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clockCollectionViewCell)
    }
    
    /// `UINib(name: "ClockHeaderView", in: bundle)`
    static func clockHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clockHeaderView)
    }
    
    /// `UINib(name: "ClockTableViewCell", in: bundle)`
    static func clockTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clockTableViewCell)
    }
    
    /// `UINib(name: "CupHeaderView", in: bundle)`
    static func cupHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cupHeaderView)
    }
    
    /// `UINib(name: "FirmwareViewController", in: bundle)`
    static func firmwareViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.firmwareViewController)
    }
    
    /// `UINib(name: "KSGuidanceViewController", in: bundle)`
    static func kSGuidanceViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.kSGuidanceViewController)
    }
    
    /// `UINib(name: "MineTableViewCell", in: bundle)`
    static func mineTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mineTableViewCell)
    }
    
    /// `UINib(name: "PushSettingViewController", in: bundle)`
    static func pushSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pushSettingViewController)
    }
    
    /// `UINib(name: "ShareSheet", in: bundle)`
    static func shareSheet(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareSheet)
    }
    
    /// `UINib(name: "TemperatureTableViewCell", in: bundle)`
    static func temperatureTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.temperatureTableViewCell)
    }
    
    /// `UINib(name: "TemperatureViewController", in: bundle)`
    static func temperatureViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.temperatureViewController)
    }
    
    /// `UINib(name: "WaterHistoryTableViewCell", in: bundle)`
    static func waterHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.waterHistoryTableViewCell)
    }
    
    /// `UINib(name: "WaterplanViewController", in: bundle)`
    static func waterplanViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.waterplanViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountTableViewCell`.
    static let accountTableViewCell: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "AccountTableViewCell")
    /// Reuse identifier `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView: Rswift.ReuseIdentifier<ClockCollectionHeaderView> = Rswift.ReuseIdentifier(identifier: "ClockCollectionHeaderView")
    /// Reuse identifier `ClockCollectionViewCell`.
    static let clockCollectionViewCell: Rswift.ReuseIdentifier<ClockCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ClockCollectionViewCell")
    /// Reuse identifier `ClockTableViewCell`.
    static let clockTableViewCell: Rswift.ReuseIdentifier<ClockTableViewCell> = Rswift.ReuseIdentifier(identifier: "ClockTableViewCell")
    /// Reuse identifier `MineTableViewCell`.
    static let mineTableViewCell: Rswift.ReuseIdentifier<MineTableViewCell> = Rswift.ReuseIdentifier(identifier: "MineTableViewCell")
    /// Reuse identifier `TemperatureTableViewCell`.
    static let temperatureTableViewCell: Rswift.ReuseIdentifier<TemperatureTableViewCell> = Rswift.ReuseIdentifier(identifier: "TemperatureTableViewCell")
    /// Reuse identifier `WaterHistoryTableViewCell`.
    static let waterHistoryTableViewCell: Rswift.ReuseIdentifier<WaterHistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "WaterHistoryTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SMS`.
    static let sMS = _R.storyboard.sMS()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "SMS", bundle: ...)`
    static func sMS(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sMS)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.sMS_SDKLocalizable` struct is generated, and contains static references to 0 localization keys.
    struct sMS_SDKLocalizable {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _WaterHistoryTableViewCell.validate()
      try _AccountTableViewCell.validate()
      try _ClockCollectionHeaderView.validate()
      try _MineTableViewCell.validate()
      try _CupHeaderView.validate()
      try _ClockHeaderView.validate()
      try _ShareSheet.validate()
    }
    
    struct _AboutUsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AboutUsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutUsViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutUsViewController
      }
      
      fileprivate init() {}
    }
    
    struct _AccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AccountTableViewCell"
      let name = "AccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mine_photo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mine_photo' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AccoutBindViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccoutBindViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccoutBindViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccoutBindViewController
      }
      
      fileprivate init() {}
    }
    
    struct _AddClockViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddClockViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddClockViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddClockViewController
      }
      
      fileprivate init() {}
    }
    
    struct _ClockCollectionHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ClockCollectionHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "ClockCollectionHeaderView"
      let name = "ClockCollectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LOGO") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LOGO' is used in nib 'ClockCollectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ClockCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClockCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ClockCollectionViewCell"
      let name = "ClockCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ClockHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ClockHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClockHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LOGO") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LOGO' is used in nib 'ClockHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_clock-remind-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clock-remind-1' is used in nib 'ClockHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ClockTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClockTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ClockTableViewCell"
      let name = "ClockTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClockTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CupHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CupHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CupHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CupHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "自然温") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '自然温' is used in nib 'CupHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cup_level") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cup_level' is used in nib 'CupHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FirmwareViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FirmwareViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FirmwareViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FirmwareViewController
      }
      
      fileprivate init() {}
    }
    
    struct _KSGuidanceViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "KSGuidanceViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> KSGuidanceViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? KSGuidanceViewController
      }
      
      fileprivate init() {}
    }
    
    struct _MineTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MineTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MineTableViewCell"
      let name = "MineTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MineTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MineTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "label_icon_Personal_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Personal_initial' is used in nib 'MineTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_Head") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_Head' is used in nib 'MineTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PushSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PushSettingViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PushSettingViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PushSettingViewController
      }
      
      fileprivate init() {}
    }
    
    struct _ShareSheet: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShareSheet"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShareSheet? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShareSheet
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_tencent") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_tencent' is used in nib 'ShareSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_weixin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_weixin' is used in nib 'ShareSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_qzone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_qzone' is used in nib 'ShareSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_friend") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_friend' is used in nib 'ShareSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_sina") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_sina' is used in nib 'ShareSheet', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TemperatureTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TemperatureTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TemperatureTableViewCell"
      let name = "TemperatureTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TemperatureViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TemperatureViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TemperatureViewController
      }
      
      fileprivate init() {}
    }
    
    struct _WaterHistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WaterHistoryTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "WaterHistoryTableViewCell"
      let name = "WaterHistoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WaterHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WaterHistoryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "record_icon_time") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'record_icon_time' is used in nib 'WaterHistoryTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _WaterplanViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WaterplanViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WaterplanViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WaterplanViewController
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try sMS.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "闪屏") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '闪屏' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<UserLoginViewController>(identifier: "login")
      let name = "Login"
      let register = StoryboardViewControllerResource<UserRegistViewController>(identifier: "register")
      
      func login(_: Void = ()) -> UserLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func register(_: Void = ()) -> UserRegistViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: register)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'UserLoginViewController'.") }
        if _R.storyboard.login().register() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'register' could not be loaded from storyboard 'Login' as 'UserRegistViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "label_icon_Clock_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Clock_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label_icon_Personal_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Personal_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label_icon_Record") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Record' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label_icon_Record_initial") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Record_initial' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label_icon_Clock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "label_icon_Personal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label_icon_Personal' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct sMS: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SMSViewController
      
      let bundle = R.hostingBundle
      let name = "SMS"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_phone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_phone' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ion_Password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ion_Password' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LOGO") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LOGO' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_water") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_water' is used in storyboard 'SMS', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}