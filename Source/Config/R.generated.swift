// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `City.plist`.
    static let cityPlist = FileResource(bundle: _R.hostingBundle, name: "City", pathExtension: "plist")
    /// Resource file `img.bundle`.
    static let imgBundle = FileResource(bundle: _R.hostingBundle, name: "img", pathExtension: "bundle")
    
    /// `bundle.URLForResource("City", withExtension: "plist")`
    static func cityPlist(_: Void) -> NSURL? {
      let fileResource = R.file.cityPlist
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("img", withExtension: "bundle")`
    static func imgBundle(_: Void) -> NSURL? {
      let fileResource = R.file.imgBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `clock`.
    static let clock = ImageResource(bundle: _R.hostingBundle, name: "clock")
    /// Image `clock_close`.
    static let clock_close = ImageResource(bundle: _R.hostingBundle, name: "clock_close")
    /// Image `clock_open`.
    static let clock_open = ImageResource(bundle: _R.hostingBundle, name: "clock_open")
    /// Image `clock_up`.
    static let clock_up = ImageResource(bundle: _R.hostingBundle, name: "clock_up")
    /// Image `cup`.
    static let cup = ImageResource(bundle: _R.hostingBundle, name: "cup")
    /// Image `cup_adaptation`.
    static let cup_adaptation = ImageResource(bundle: _R.hostingBundle, name: "cup_adaptation")
    /// Image `cup_level`.
    static let cup_level = ImageResource(bundle: _R.hostingBundle, name: "cup_level")
    /// Image `cup_up`.
    static let cup_up = ImageResource(bundle: _R.hostingBundle, name: "cup_up")
    /// Image `Guidance1`.
    static let guidance1 = ImageResource(bundle: _R.hostingBundle, name: "Guidance1")
    /// Image `Guidance2`.
    static let guidance2 = ImageResource(bundle: _R.hostingBundle, name: "Guidance2")
    /// Image `Guidance3`.
    static let guidance3 = ImageResource(bundle: _R.hostingBundle, name: "Guidance3")
    /// Image `Guidance4`.
    static let guidance4 = ImageResource(bundle: _R.hostingBundle, name: "Guidance4")
    /// Image `logo`.
    static let logo = ImageResource(bundle: _R.hostingBundle, name: "logo")
    /// Image `me`.
    static let me = ImageResource(bundle: _R.hostingBundle, name: "me")
    /// Image `me_up`.
    static let me_up = ImageResource(bundle: _R.hostingBundle, name: "me_up")
    /// Image `mine_photo`.
    static let mine_photo = ImageResource(bundle: _R.hostingBundle, name: "mine_photo")
    /// Image `photo`.
    static let photo = ImageResource(bundle: _R.hostingBundle, name: "photo")
    /// Image `plus`.
    static let plus = ImageResource(bundle: _R.hostingBundle, name: "plus")
    /// Image `tata_close`.
    static let tata_close = ImageResource(bundle: _R.hostingBundle, name: "tata_close")
    /// Image `已恒温`.
    static let 已恒温 = ImageResource(bundle: _R.hostingBundle, name: "已恒温")
    /// Image `恒温中`.
    static let 恒温中 = ImageResource(bundle: _R.hostingBundle, name: "恒温中")
    /// Image `自然温`.
    static let 自然温 = ImageResource(bundle: _R.hostingBundle, name: "自然温")
    
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.clock, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "clock_close", bundle: ..., traitCollection: ...)`
    static func clock_close(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.clock_close, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "clock_open", bundle: ..., traitCollection: ...)`
    static func clock_open(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.clock_open, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "clock_up", bundle: ..., traitCollection: ...)`
    static func clock_up(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.clock_up, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cup", bundle: ..., traitCollection: ...)`
    static func cup(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cup, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cup_adaptation", bundle: ..., traitCollection: ...)`
    static func cup_adaptation(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cup_adaptation, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cup_level", bundle: ..., traitCollection: ...)`
    static func cup_level(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cup_level, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cup_up", bundle: ..., traitCollection: ...)`
    static func cup_up(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cup_up, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Guidance1", bundle: ..., traitCollection: ...)`
    static func guidance1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guidance1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Guidance2", bundle: ..., traitCollection: ...)`
    static func guidance2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guidance2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Guidance3", bundle: ..., traitCollection: ...)`
    static func guidance3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guidance3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Guidance4", bundle: ..., traitCollection: ...)`
    static func guidance4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guidance4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.me, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "me_up", bundle: ..., traitCollection: ...)`
    static func me_up(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.me_up, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "mine_photo", bundle: ..., traitCollection: ...)`
    static func mine_photo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mine_photo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.photo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.plus, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tata_close", bundle: ..., traitCollection: ...)`
    static func tata_close(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tata_close, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "已恒温", bundle: ..., traitCollection: ...)`
    static func 已恒温(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.已恒温, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "恒温中", bundle: ..., traitCollection: ...)`
    static func 恒温中(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.恒温中, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "自然温", bundle: ..., traitCollection: ...)`
    static func 自然温(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.自然温, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 13 nibs.
  struct nib {
    /// Nib `AboutUsViewController`.
    static let aboutUsViewController = _R.nib._AboutUsViewController()
    /// Nib `AccountTableViewCell`.
    static let accountTableViewCell = _R.nib._AccountTableViewCell()
    /// Nib `CFCityCell`.
    static let cFCityCell = _R.nib._CFCityCell()
    /// Nib `CitySearchResultVC`.
    static let citySearchResultVC = _R.nib._CitySearchResultVC()
    /// Nib `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView = _R.nib._ClockCollectionHeaderView()
    /// Nib `ClockCollectionViewCell`.
    static let clockCollectionViewCell = _R.nib._ClockCollectionViewCell()
    /// Nib `CupHeaderView`.
    static let cupHeaderView = _R.nib._CupHeaderView()
    /// Nib `FirmwareViewController`.
    static let firmwareViewController = _R.nib._FirmwareViewController()
    /// Nib `HeaderItemView`.
    static let headerItemView = _R.nib._HeaderItemView()
    /// Nib `KSGuidanceViewController`.
    static let kSGuidanceViewController = _R.nib._KSGuidanceViewController()
    /// Nib `MineTableViewCell`.
    static let mineTableViewCell = _R.nib._MineTableViewCell()
    /// Nib `TemperatureTableViewCell`.
    static let temperatureTableViewCell = _R.nib._TemperatureTableViewCell()
    /// Nib `TemperatureViewController`.
    static let temperatureViewController = _R.nib._TemperatureViewController()
    
    /// `UINib(name: "AboutUsViewController", bundle: ...)`
    static func aboutUsViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.aboutUsViewController)
    }
    
    /// `UINib(name: "AccountTableViewCell", bundle: ...)`
    static func accountTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.accountTableViewCell)
    }
    
    /// `UINib(name: "CFCityCell", bundle: ...)`
    static func cFCityCell(_: Void) -> UINib {
      return UINib(resource: R.nib.cFCityCell)
    }
    
    /// `UINib(name: "CitySearchResultVC", bundle: ...)`
    static func citySearchResultVC(_: Void) -> UINib {
      return UINib(resource: R.nib.citySearchResultVC)
    }
    
    /// `UINib(name: "ClockCollectionHeaderView", bundle: ...)`
    static func clockCollectionHeaderView(_: Void) -> UINib {
      return UINib(resource: R.nib.clockCollectionHeaderView)
    }
    
    /// `UINib(name: "ClockCollectionViewCell", bundle: ...)`
    static func clockCollectionViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.clockCollectionViewCell)
    }
    
    /// `UINib(name: "CupHeaderView", bundle: ...)`
    static func cupHeaderView(_: Void) -> UINib {
      return UINib(resource: R.nib.cupHeaderView)
    }
    
    /// `UINib(name: "FirmwareViewController", bundle: ...)`
    static func firmwareViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.firmwareViewController)
    }
    
    /// `UINib(name: "HeaderItemView", bundle: ...)`
    static func headerItemView(_: Void) -> UINib {
      return UINib(resource: R.nib.headerItemView)
    }
    
    /// `UINib(name: "KSGuidanceViewController", bundle: ...)`
    static func kSGuidanceViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.kSGuidanceViewController)
    }
    
    /// `UINib(name: "MineTableViewCell", bundle: ...)`
    static func mineTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.mineTableViewCell)
    }
    
    /// `UINib(name: "TemperatureTableViewCell", bundle: ...)`
    static func temperatureTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.temperatureTableViewCell)
    }
    
    /// `UINib(name: "TemperatureViewController", bundle: ...)`
    static func temperatureViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.temperatureViewController)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountTableViewCell`.
    static let accountTableViewCell: ReuseIdentifier<AccountTableViewCell> = ReuseIdentifier(identifier: "AccountTableViewCell")
    /// Reuse identifier `ClockCollectionHeaderView`.
    static let clockCollectionHeaderView: ReuseIdentifier<ClockCollectionHeaderView> = ReuseIdentifier(identifier: "ClockCollectionHeaderView")
    /// Reuse identifier `ClockCollectionViewCell`.
    static let clockCollectionViewCell: ReuseIdentifier<ClockCollectionViewCell> = ReuseIdentifier(identifier: "ClockCollectionViewCell")
    /// Reuse identifier `MineTableViewCell`.
    static let mineTableViewCell: ReuseIdentifier<MineTableViewCell> = ReuseIdentifier(identifier: "MineTableViewCell")
    /// Reuse identifier `TemperatureTableViewCell`.
    static let temperatureTableViewCell: ReuseIdentifier<TemperatureTableViewCell> = ReuseIdentifier(identifier: "TemperatureTableViewCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SMS`.
    static let sMS = _R.storyboard.sMS()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "SMS", bundle: ...)`
    static func sMS(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.sMS)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.sMS_SDKLocalizable` struct is generated, and contains static references to 0 localization keys.
    struct sMS_SDKLocalizable {
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "im.meiyou.IMYTTQ1") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AboutUsViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "AboutUsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AboutUsViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AboutUsViewController
      }
      
      private init() {}
    }
    
    struct _AccountTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = AccountTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "AccountTableViewCell"
      let name = "AccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }
      
      private init() {}
    }
    
    struct _CFCityCell: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CFCityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CFCityCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CFCityCell
      }
      
      private init() {}
    }
    
    struct _CitySearchResultVC: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CitySearchResultVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _ClockCollectionHeaderView: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = ClockCollectionHeaderView
      
      let bundle = _R.hostingBundle
      let identifier = "ClockCollectionHeaderView"
      let name = "ClockCollectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionHeaderView
      }
      
      private init() {}
    }
    
    struct _ClockCollectionViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = ClockCollectionViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "ClockCollectionViewCell"
      let name = "ClockCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClockCollectionViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClockCollectionViewCell
      }
      
      private init() {}
    }
    
    struct _CupHeaderView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CupHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CupHeaderView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CupHeaderView
      }
      
      private init() {}
    }
    
    struct _FirmwareViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "FirmwareViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FirmwareViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? FirmwareViewController
      }
      
      private init() {}
    }
    
    struct _HeaderItemView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "HeaderItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HeaderItemView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? HeaderItemView
      }
      
      private init() {}
    }
    
    struct _KSGuidanceViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "KSGuidanceViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> KSGuidanceViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? KSGuidanceViewController
      }
      
      private init() {}
    }
    
    struct _MineTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = MineTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "MineTableViewCell"
      let name = "MineTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MineTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MineTableViewCell
      }
      
      private init() {}
    }
    
    struct _TemperatureTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = TemperatureTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "TemperatureTableViewCell"
      let name = "TemperatureTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureTableViewCell
      }
      
      private init() {}
    }
    
    struct _TemperatureViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TemperatureViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TemperatureViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TemperatureViewController
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try launchScreen.validate()
      try sMS.validate()
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "logo") == nil { throw ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct login: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let login = StoryboardViewControllerResource<UserLoginViewController>(identifier: "login")
      let name = "Login"
      let register = StoryboardViewControllerResource<UserRegistViewController>(identifier: "register")
      
      func login(_: Void) -> UserLoginViewController? {
        return UIStoryboard(resource: self).instantiateViewController(login)
      }
      
      func register(_: Void) -> UserRegistViewController? {
        return UIStoryboard(resource: self).instantiateViewController(register)
      }
      
      static func validate() throws {
        if UIImage(named: "logo") == nil { throw ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().login() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'UserLoginViewController'.") }
        if _R.storyboard.login().register() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'register' could not be loaded from storyboard 'Login' as 'UserRegistViewController'.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIImage(named: "clock") == nil { throw ValidationError(description: "[R.swift] Image named 'clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "cup") == nil { throw ValidationError(description: "[R.swift] Image named 'cup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "me") == nil { throw ValidationError(description: "[R.swift] Image named 'me' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct sMS: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SMSViewController
      
      let bundle = _R.hostingBundle
      let name = "SMS"
      
      static func validate() throws {
        if UIImage(named: "logo") == nil { throw ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'SMS', but couldn't be loaded.") }
        if UIImage(named: "photo") == nil { throw ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'SMS', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}